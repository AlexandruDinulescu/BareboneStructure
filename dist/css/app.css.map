{"version":3,"sources":["_sprite.scss","app.scss"],"names":[],"mappings":"AA8FI;EAdA,sBAAqB;EACrB,kBAAiB;EALjB,wCAAuB;EALvB,kCAhDyC;EAsCzC,YAtC+C;EA0C/C,aA1CqD;CAyEpD;;AAFD;EAdA,sBAAqB;EACrB,kBAAiB;EALjB,wCAAuB;EALvB,mCA/CwC;EAqCxC,YArC8C;EAyC9C,aAzCoD;CAwEnD;;AAFD;EAdA,sBAAqB;EACrB,kBAAiB;EALjB,wCAAuB;EALvB,gCA9CgC;EAoChC,aApCuC;EAwCvC,cAxC8C;CAuE7C;;AAFD;EAdA,sBAAqB;EACrB,kBAAiB;EALjB,wCAAuB;EALvB,6BA7CoC;EAmCpC,aAnC2C;EAuC3C,cAvCkD;CAsEjD;;AAFD;EAdA,sBAAqB;EACrB,kBAAiB;EALjB,wCAAuB;EALvB,gCA5CmC;EAkCnC,aAlC0C;EAsC1C,cAtCiD;CAqEhD;;AAFD;EAdA,sBAAqB;EACrB,kBAAiB;EALjB,wCAAuB;EALvB,gCA3CuC;EAiCvC,YAjC6C;EAqC7C,aArCmD;CAoElD;;AAFD;EAdA,sBAAqB;EACrB,kBAAiB;EALjB,wCAAuB;EALvB,mCA1CqC;EAgCrC,YAhC2C;EAoC3C,aApCiD;CAmEhD;;AAFD;EAdA,sBAAqB;EACrB,kBAAiB;EALjB,wCAAuB;EALvB,mCAzC2C;EA+B3C,aA/BkD;EAmClD,cAnCyD;CAkExD;;AAFD;EAdA,sBAAqB;EACrB,kBAAiB;EALjB,wCAAuB;EALvB,mCAxCqC;EA8BrC,aA9B4C;EAkC5C,cAlCmD;CAiElD;;AAFD;EAdA,sBAAqB;EACrB,kBAAiB;EALjB,wCAAuB;EALvB,mCAvCuC;EA6BvC,YA7B6C;EAiC7C,aAjCmD;CAgElD;;AC9FL;EACK,WAAU;CACd","file":"app.css","sourcesContent":["// SCSS variables are information about icon's compiled state, stored under its original file name\n//\n// .icon-home {\n//   width: $icon-home-width;\n// }\n// $: '';\n// $: ;\n// $: ;\n// $: ;\n// $: ;\n// $: ;\n// $: ;\n// $: ;\n// $: ;\n// $: '';\n// $spritesheet-width: 360px;\n// $spritesheet-height: 273px;\n// $spritesheet-image: './img/sprite.png';\n// The large array-like variables contain all information about a single icon\n// $icon-home: x y offset_x offset_y width height total_width total_height image_path;\n//\n// At the bottom of this section, we provide information about the spritesheet itself\n// $spritesheet: width height image $spritesheet-sprites;\n$button-checkbox: (49px, 244px, -49px, -244px, 40px, 20px, 360px, 273px, './img/sprite.png', 'button-checkbox', );\n$button-radio: (109px, 244px, -109px, -244px, 40px, 20px, 360px, 273px, './img/sprite.png', 'button-radio', );\n$icon-coin: (0px, 122px, 0px, -122px, 102px, 102px, 360px, 273px, './img/sprite.png', 'icon-coin', );\n$icon-contact-hover: (0px, 0px, 0px, 0px, 170px, 102px, 360px, 273px, './img/sprite.png', 'icon-contact-hover', );\n$icon-contact: (190px, 0px, -190px, 0px, 170px, 102px, 360px, 273px, './img/sprite.png', 'icon-contact', );\n$icon-google-plus: (0px, 244px, 0px, -244px, 29px, 29px, 360px, 273px, './img/sprite.png', 'icon-google-plus', );\n$icon-list: (200px, 244px, -200px, -244px, 10px, 10px, 360px, 273px, './img/sprite.png', 'icon-list', );\n$icon-news-hover: (122px, 122px, -122px, -122px, 102px, 102px, 360px, 273px, './img/sprite.png', 'icon-news-hover', );\n$icon-news: (244px, 122px, -244px, -122px, 102px, 102px, 360px, 273px, './img/sprite.png', 'icon-news', );\n$icon-search: (169px, 244px, -169px, -244px, 11px, 11px, 360px, 273px, './img/sprite.png', 'icon-search', );\n$spritesheet-sprites: ($button-checkbox, $button-radio, $icon-coin, $icon-contact-hover, $icon-contact, $icon-google-plus, $icon-list, $icon-news-hover, $icon-news, $icon-search, );\n$spritesheet: (360px, 273px, './img/sprite.png', $spritesheet-sprites, );\n\n// The provided mixins are intended to be used with the array-like variables\n//\n// .icon-home {\n//   @include sprite-width($icon-home);\n// }\n//\n// .icon-email {\n//   @include sprite($icon-email);\n// }\n//\n// Example usage in HTML:\n//\n// `display: block` sprite:\n// <div class=\"icon-home\"></div>\n//\n// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:\n//\n// // CSS\n// .icon {\n//   display: inline-block;\n// }\n//\n// // HTML\n// <i class=\"icon icon-home\"></i>\n@mixin sprite-width($sprite) {\n    width: nth($sprite, 5);\n}\n\n@mixin sprite-height($sprite) {\n    height: nth($sprite, 6);\n}\n\n@mixin sprite-position($sprite) {\n    $sprite-offset-x: nth($sprite, 3);\n    $sprite-offset-y: nth($sprite, 4);\n    background-position: $sprite-offset-x  $sprite-offset-y;\n}\n\n@mixin sprite-image($sprite) {\n    $sprite-image: nth($sprite, 9);\n    background-image: url(#{$sprite-image});\n}\n\n@mixin sprite($sprite) {\n    display: inline-block;\n    margin-right: 5px; \n    @include sprite-image($sprite);\n    @include sprite-position($sprite);\n    @include sprite-width($sprite);\n    @include sprite-height($sprite);\n}\n\n// The `sprites` mixin generates identical output to the CSS template\n//   but can be overridden inside of SCSS\n//\n@mixin sprites($sprites) {\n  @each $sprite in $sprites {\n    $sprite-name: nth($sprite, 10);\n    .#{$sprite-name} {\n      @include sprite($sprite);\n    }\n  }\n}\n@include sprites($spritesheet-sprites);\n","@import 'sprite';\r\n\r\nbody {\r\n     color: red;  \r\n}"]}